---
interface Props {
    position: "left" | "right";
    icon?: string;
}

const { position, icon } = Astro.props;

import "../../styles/global.css";
---

<astro-modal>
    <span id="open-modal-btn" class="open-modal-btn">{icon}</span>
    <div id="modal" class={`modal ${position}`}>
        <div class="modal-content">
            <span id="close-modal-btn" class="close-btn">×</span>
            <span class="just-spacing" style="margin-top:1rem;">&nbsp;</span>
            <div class="modal-content-inner">
                <slot />
            </div>
        </div>
    </div>
</astro-modal>

<script>
    class Modal extends HTMLElement {
        constructor() {
            super();
            const modal = this.querySelector(".modal") as HTMLElement;
            const openBtn = this.querySelector(".open-modal-btn");
            const closeBtn = this.querySelector(".close-btn");

            function setupModalListeners() {
                openBtn?.addEventListener("click", () => {
                    if (modal) {
                        modal.style.display = "flex";
                        setTimeout(() => {
                            modal.classList.add("show");
                        }, 10);
                    }
                });

                closeBtn?.addEventListener("click", () => {
                    if (modal) {
                        modal.classList.remove("show");
                        setTimeout(() => {
                            modal.style.display = "none";
                        }, 300);
                    }
                });

                // モーダル外クリックで閉じる
                modal?.addEventListener("click", (e) => {
                    if (e.target === modal) {
                        modal.classList.remove("show");
                        setTimeout(() => {
                            modal.style.display = "none";
                        }, 300);
                    }
                });
            }

            // 初期設定
            setupModalListeners();

            // ページ遷移後も実行されるように
            document.addEventListener("astro:page-load", setupModalListeners);
        }
    }
    customElements.define("astro-modal", Modal);
</script>

<style>
    .open-modal-btn {
        background-color: rgb(var(--surface0) / 0.85);
        border-radius: 16px;
        padding: 0.5rem;
        font-size: 16px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition:
            background-color 0.3s cubic-bezier(0.4, 0, 0.2, 1),
            transform 0.3s cubic-bezier(0.34, 1.56, 0.64, 1),
            box-shadow 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        outline: 1px solid rgb(var(--overlay1) / 0.6);
        will-change: transform;
        width: 1.5rem;
        height: 1.5rem;
    }
    .open-modal-btn:hover {
        background-color: rgb(var(--surface1) / 0.9);
        transform: translateY(-3px) scale(1.02);
        box-shadow: 0 6px 16px rgb(var(--shadow) / 0.2);
    }
    .open-modal-btn:active {
        transform: translateY(-1px) scale(0.98);
    }
    .open-modal-btn {
        margin: 0 12px;
    }
    .account-shortcut {
        position: relative;
    }

    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.35);
        opacity: 0;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        align-items: center;
        backdrop-filter: blur(3px);
        will-change: opacity;
    }

    .modal.show {
        opacity: 1;
    }

    .modal-content {
        position: fixed;
        padding: 28px;
        width: 300px;
        height: 95%;
        background-color: rgb(var(--surface0) / 0.85);
        backdrop-filter: blur(12px);
        transition: all 0.4s cubic-bezier(0.34, 1.56, 0.64, 1);
        box-shadow:
            0px 8px 32px rgb(var(--green) / 0.25),
            0 0 0 1px rgb(var(--sapphire) / 0.2),
            inset 0 0 0 1px rgb(var(--blue) / 0.1);
        will-change: transform;
        overflow-y: auto;
        pointer-events: auto;
        overscroll-behavior: contain;
    }

    .modal-content-inner {
        display: flex;
        flex-direction: column;
    }

    .modal.right .modal-content {
        right: 0;
        transform: translateX(100%);
        border-top-left-radius: 24px;
        border-bottom-left-radius: 24px;
    }

    .modal.left .modal-content {
        left: 0;
        transform: translateX(-100%);
        border-top-right-radius: 24px;
        border-bottom-right-radius: 24px;
    }

    .modal.show .modal-content {
        transform: translateX(0);
    }

    .close-btn {
        cursor: pointer;
        display: flex;
        outline: solid 2px rgb(var(--overlay1) / 0.6);
        padding: 4px;
        border-radius: 10px;
        height: 2rem;
        width: 2rem;
        align-items: center;
        justify-content: center;
        font-size: 1.2rem;
        transition: all 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
        will-change: transform;
    }

    .close-btn:hover {
        background-color: rgb(var(--surface1));
        transform: scale(1.08) rotate(-4deg);
        outline-color: rgb(var(--overlay2));
    }

    .close-btn:active {
        transform: scale(0.95) rotate(-2deg);
    }

    @media (hover: hover) {
        .modal-content:hover {
            box-shadow: 0px 12px 40px rgb(var(--shadow) / 0.3);
        }
    }

    @media (max-width: 815px) {
        .modal-content {
            height: 88%;
        }
    }
</style>
